/*
 * @Copyright 2018-2022 HardBackNutter
 * @License GNU General Public License
 *
 * This file is part of NeverTooManyBooks.
 *
 * NeverTooManyBooks is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * NeverTooManyBooks is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NeverTooManyBooks. If not, see <http://www.gnu.org/licenses/>.
 */

import java.time.LocalDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

plugins {
    id("com.android.application")
    id("kotlin-android")
    // https://github.com/mannodermaus/android-junit5
    id("de.mannodermaus.android-junit5")
}

/*
    $HOME/.gradle/gradle.properties:
    hbn.signing=$HOME/blah/blah/hbn.signing

    $HOME/blah/blah/hbn.signing:
    android {
        signingConfigs {
            debug {
                storeFile file("/path/to/keystore.jks")
                storePassword "myPassword"
                keyAlias = "myDebugKey"
                keyPassword "myPassword"
            }
            beta {
                storeFile file("/path/to/keystore.jks")
                storePassword "myPassword"
                keyAlias = "myBetaKey"
                keyPassword "myPassword"
            }
            release {
                storeFile file("/path/to/keystore.jks")
                storePassword "myPassword"
                keyAlias = "myReleaseKey"
                keyPassword "myPassword"
            }
        }

        buildTypes {
            debug {
                signingConfig signingConfigs.debug
            }
            beta {
                signingConfig signingConfigs.beta
            }
            release {
                signingConfig signingConfigs.release
            }
        }
    }
 */
if (project.hasProperty("hbn.signing")
        && new File(project.property("hbn.signing")).exists()) {
    apply from: project.property("hbn.signing")
}

/*
    $HOME/.gradle/gradle.properties:
    NeverTooManyBooks.email=$HOME/blah/blah/NeverTooManyBooks.email

    $HOME/blah/blah/NeverTooManyBooks.email:
    android {
        defaultConfig {
            // ACRA crash reports
            buildConfigField("String", "EMAIL_ACRA", '"acra@somewhere.com"')
            // Manual debug reports
            buildConfigField("String", "EMAIL_DEBUG_REPORT", '"debug@somewhere.com"')
            // About-page contact
            buildConfigField("String", "EMAIL_CONTACT", '"info@somewhere.com"')
        }
    }
 */
if (project.hasProperty("NeverTooManyBooks.email")
        && new File(project.property("NeverTooManyBooks.email")).exists()) {
    apply from: project.property("NeverTooManyBooks.email")
}

android {
    namespace "com.hardbacknutter.nevertoomanybooks"

    compileSdk rootProject.ext.compileSdk

    defaultConfig {
        applicationId "com.hardbacknutter.nevertoomanybooks"
        versionCode 19
        versionName = '3.2'

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Email address placeholders. Their values should be empty, i.e. '""'.
        // The real values are in "NeverTooManyBooks.email"; see above
        if (getBuildConfigFields().get("EMAIL_ACRA") == null) {
            // ACRA crash reports
            buildConfigField("String", "EMAIL_ACRA", '""')
            // Manual debug reports
            buildConfigField("String", "EMAIL_DEBUG_REPORT", '""')
            // About-page contact
            buildConfigField("String", "EMAIL_CONTACT", '""')
        }

        // Add the build UTC DateTime; ISO formatted
        buildConfigField("String", "TIMESTAMP",
                '"' + LocalDateTime.now(ZoneOffset.UTC)
                        .format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) + '"')


        // uses old google api which theoretically can be disabled at any time by google
        buildConfigField("boolean", "ENABLE_GOOGLE_BOOKS", "true")

        // Dutch.
        buildConfigField("boolean", "ENABLE_STRIP_INFO", "true")
        // Dutch.
        buildConfigField("boolean", "ENABLE_LAST_DODO", "true")


        buildConfigField("boolean", "ENABLE_LIBRARY_THING_ALT_ED", "true")
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"

            // under development
            buildConfigField("boolean", "ENABLE_STRIP_INFO_LOGIN", "false")
            // under development
            buildConfigField("boolean", "ENABLE_KB_NL", "false")
        }
        beta {
            initWith release
            versionNameSuffix "-beta"
            // applicationIdSuffix: same as release to be able to update rel->beta
        }
        debug {
            debuggable true
            versionNameSuffix "-debug"
            applicationIdSuffix ".debug"

            // under development
            buildConfigField("boolean", "ENABLE_STRIP_INFO_LOGIN", "true")
            // under development; adapting to the new site format.
            // 2021-04: the site has changed technology and our engine no longer works.
            buildConfigField("boolean", "ENABLE_KB_NL", "true")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11

        // https://developer.android.com/studio/releases/#4-0-0-desugar
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = 11
    }

    buildFeatures {
        viewBinding true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            // Can be enabled to make Log.x work. OR, use Logger.x
            returnDefaultValues = false
            all {
                reports {
                    junitXml.enabled = true
                    html.enabled = false
                }
            }
        }
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE',
                         'META-INF/LICENSE.md',
                         'META-INF/LICENSE.txt',
                         'META-INF/license.txt',
                         'META-INF/LICENSE-notice.md',
                         'META-INF/NOTICE',
                         'META-INF/NOTICE.txt',
                         'META-INF/notice.txt',
                         'META-INF/ASL2.0',
                         'META-INF/DEPENDENCIES',
                         'META-INF/README.md',
                         'META-INF/CHANGES']
        }
    }

    lint {
        // allow command line builds to complete
        abortOnError false
    }

    // This configuration specifies how an app bundle should be split
    // in terms of language, density and cpu architecture (abi).
    // The default values are true. This means a split will be generated.
    bundle {
        language {
            enableSplit = false
        }
//        density {
//            enableSplit = true
//        }
//        abi {
//            enableSplit = true
//        }
    }
}

dependencies {
    // We're using an updated/repacked org.json, version 20211205
    // https://github.com/stleary/JSON-java
    implementation project(path: ":repacked-org-json")
    implementation project(path: ":fastscroller")

    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:${desugar_version}")

    implementation("androidx.activity:activity:${androidx_activity_version}")
    implementation("androidx.annotation:annotation:${androidx_annotation_version}")
    implementation("androidx.appcompat:appcompat:${androidx_appcompat_version}")
    implementation("androidx.cardview:cardview:${androidx_cardview_version}")
    implementation("androidx.collection:collection:${androidx_collection_version}")
    // core is only needed for custom constraint helpers
    implementation("androidx.constraintlayout:constraintlayout-core:"
            + "${androidx_constraintlayout_core_version}")
    implementation("androidx.constraintlayout:constraintlayout:"
            + "${androidx_constraintlayout_version}")
    implementation("androidx.coordinatorlayout:coordinatorlayout:"
            + "${androidx_coordinatorlayout_version}")
    implementation("androidx.core:core:${androidx_core_version}")
    implementation("androidx.customview:customview:${androidx_customview_version}")
    implementation("androidx.documentfile:documentfile:${androidx_documentfile_version}")
    implementation("androidx.drawerlayout:drawerlayout:${androidx_drawerlayout_version}")
    implementation("androidx.exifinterface:exifinterface:${androidx_exifinterface_version}")
    implementation("androidx.fragment:fragment:${androidx_fragment_version}")

    // ktx needed for "androidx.preference:preference:1.2.0"
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:${androidx_lifecycle_version}")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:${androidx_lifecycle_version}")

    implementation("androidx.preference:preference:${androidx_preference_version}")
    implementation("androidx.recyclerview:recyclerview:${androidx_recyclerview_version}")
//    implementation("androidx.slidingpanelayout:slidingpanelayout:"
//            + "${androidx_slidingpanelayout_version}")
    implementation("androidx.viewpager2:viewpager2:${androidx_viewpager2_version}")
    implementation("androidx.window:window:${androidx_window_version}")

    // https://github.com/material-components/material-components-android/releases
    implementation("com.google.android.material:material:${google_material_version}")

    // Tar file support for backups
    // http://commons.apache.org/proper/commons-compress/
    implementation("org.apache.commons:commons-compress:${apache_commons_compress}")
    // http://commons.apache.org/proper/commons-codec/
    implementation("commons-codec:commons-codec:${apache_commons_codec}")

    // jsoup HTML parser library @ https://jsoup.org/
    implementation("org.jsoup:jsoup:${jsoup_version}")

    // Embedded ZXing: https://github.com/journeyapps/zxing-android-embedded
    implementation("com.journeyapps:zxing-android-embedded:${zxing_android_embedded_version}")

    // https://www.acra.ch/docs/Setup/
    implementation("ch.acra:acra-core:${acra_version}")
    implementation("ch.acra:acra-mail:${acra_version}")
    implementation("ch.acra:acra-dialog:${acra_version}")

    // local tests use JUnit5
    testImplementation("org.mockito:mockito-core:${mockito_version}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockito_version}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${jupiter_version}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${jupiter_version}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${jupiter_version}")

    // device tests use JUnit4
    androidTestImplementation("androidx.test:core:${androidx_test_core_version}")
    androidTestImplementation("androidx.test:runner:${androidx_test_runner_version}")
    androidTestImplementation("androidx.test:rules:${androidx_test_rules_version}")

    androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:" +
            "${kotlinx_coroutines_core}")

//    testImplementation("org.robolectric:robolectric:4.4")
//    androidTestImplementation("androidx.test.espresso:espresso-core:3.3.0")
}
