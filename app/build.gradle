/*
 * @Copyright 2018-2022 HardBackNutter
 * @License GNU General Public License
 *
 * This file is part of NeverTooManyBooks.
 *
 * NeverTooManyBooks is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * NeverTooManyBooks is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NeverTooManyBooks. If not, see <http://www.gnu.org/licenses/>.
 */

import java.time.LocalDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("de.mannodermaus.android-junit5")
}

/*
    $HOME/.gradle/gradle.properties:
        NeverTooManyBooks.properties=$HOME/blah/blah/NeverTooManyBooks.properties

    $HOME/blah/blah/NeverTooManyBooks.properties:
        sign.storeFile=$HOME/blah/blah/keystore.jks
        sign.storePassword=MyStorePassword
        sign.keyAlias=MyKeyAlias
        sign.keyPassword=MyKeyPassword
        # This one can be empty but must exist
        email.acra=acra@somewhere.com

 */
final def props = new Properties()
if (project.hasProperty("NeverTooManyBooks.properties")) {
    final def file = new File(project.property("NeverTooManyBooks.properties"))
    if (file.exists()) {
        props.load(new FileInputStream(file))
    }
}

android {
    namespace "com.hardbacknutter.nevertoomanybooks"

    compileSdk rootProject.ext.compileSdk

    signingConfigs {
        release {
            storeFile file(props['sign.storeFile'])
            storePassword props['sign.storePassword']
            keyAlias props['sign.keyAlias']
            keyPassword props['sign.keyPassword']
        }
    }

    defaultConfig {
        applicationId rootProject.ext.applicationId
        versionCode rootProject.ext.applicationVersionCode
        versionName = rootProject.ext.applicationVersionName

        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion

        signingConfig signingConfigs.release

        resourceConfigurations += ["en", "en_GB", "de", "fr", "nl", "pt", "es", "it", "el", "ru", "tr"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments["runnerBuilder"] =
                "de.mannodermaus.junit5.AndroidJUnit5Builder"

        buildConfigField("String", "EMAIL_ACRA", '"' + props['email.acra'] + '"')

        // Add the build UTC DateTime; ISO formatted
        buildConfigField("String", "TIMESTAMP", "\"x\"")

        buildConfigField("boolean", "ENABLE_AMAZON", "true")
        buildConfigField("boolean", "ENABLE_BEDETHEQUE", "true")
        buildConfigField("boolean", "ENABLE_BOL", "true")
        buildConfigField("boolean", "ENABLE_GOOGLE_BOOKS", "true")
        buildConfigField("boolean", "ENABLE_ISFDB", "true")
        buildConfigField("boolean", "ENABLE_KB_NL", "true")
        buildConfigField("boolean", "ENABLE_LAST_DODO", "true")
        buildConfigField("boolean", "ENABLE_OPEN_LIBRARY", "true")
        buildConfigField("boolean", "ENABLE_STRIP_INFO", "true")

        buildConfigField("boolean", "ENABLE_GOODREADS_BY_EXT_ID", "true")
        buildConfigField("boolean", "ENABLE_LIBRARY_THING_ALT_ED", "true")
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true

            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"

            resValue("string", "searchSuggestAuthority",
                    "${applicationId}.SearchSuggestionProvider")
            resValue("string", "fileProviderAuthority",
                    "${applicationId}.GenericFileProvider")

            // Add the build UTC DateTime; ISO formatted
            buildConfigField("String", "TIMESTAMP",
                    '"' + LocalDateTime.now(ZoneOffset.UTC)
                            .format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) + '"')

            // under development
            buildConfigField("boolean", "ENABLE_STRIP_INFO_LOGIN", "false")
            // under development
            buildConfigField("boolean", "EMBEDDED_BARCODE_SCANNER", "false")
        }
        beta {
            initWith release
            versionNameSuffix "-beta"
            // applicationIdSuffix: same as release to be able to update rel->beta

            // Add the build UTC DateTime; ISO formatted
            buildConfigField("String", "TIMESTAMP",
                    '"' + LocalDateTime.now(ZoneOffset.UTC)
                            .format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) + '"')

            resValue("string", "searchSuggestAuthority",
                    "${applicationId}.SearchSuggestionProvider.beta")
            resValue("string", "fileProviderAuthority",
                    "${applicationId}.GenericFileProvider.beta")
        }
        debug {
            debuggable true
            versionNameSuffix "-debug"
            applicationIdSuffix ".debug"

            resValue("string", "searchSuggestAuthority",
                    "${applicationId}.SearchSuggestionProvider.debug")
            resValue("string", "fileProviderAuthority",
                    "${applicationId}.GenericFileProvider.debug")

            // under development
            buildConfigField("boolean", "ENABLE_STRIP_INFO_LOGIN", "true")
            // under development
            buildConfigField("boolean", "EMBEDDED_BARCODE_SCANNER", "false")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11

        // https://developer.android.com/studio/releases/#4-0-0-desugar
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = 11
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            // Can be enabled to make Log.x work. OR, use Logger.x
            returnDefaultValues = false
            all {
                reports {
                    junitXml.getRequired().set(true)
                    html.getRequired().set(false)
                }
            }
        }
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE',
                         'META-INF/LICENSE.md',
                         'META-INF/LICENSE.txt',
                         'META-INF/license.txt',
                         'META-INF/LICENSE-notice.md',
                         'META-INF/NOTICE',
                         'META-INF/NOTICE.txt',
                         'META-INF/notice.txt',
                         'META-INF/ASL2.0',
                         'META-INF/DEPENDENCIES',
                         'META-INF/README.md',
                         'META-INF/CHANGES']
        }
    }

    lint {
        // allow command line builds to complete
        abortOnError false
    }

    // This configuration specifies how an app bundle should be split
    // in terms of language, density and cpu architecture (abi).
    // The default values are true. This means a split will be generated.
    bundle {
        language {
            enableSplit = false
        }
//        density {
//            enableSplit = true
//        }
//        abi {
//            enableSplit = true
//        }
    }
}

dependencies {
    implementation project(path: ":core")
    implementation project(path: ":fastscroller")
    // We're using an updated/repacked org.json, version 20220924
    // https://github.com/stleary/JSON-java
    implementation project(path: ":repacked-org-json")

    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs_nio:${desugar_version}")

    implementation("androidx.activity:activity:${androidx_activity_version}")
    implementation("androidx.annotation:annotation:${androidx_annotation_version}")
    implementation("androidx.appcompat:appcompat:${androidx_appcompat_version}")
    implementation("androidx.cardview:cardview:${androidx_cardview_version}")
    implementation("androidx.collection:collection:${androidx_collection_version}")
    // core is only needed for custom constraint helpers
    implementation("androidx.constraintlayout:constraintlayout-core:"
            + "${androidx_constraintlayout_core_version}")
    implementation("androidx.constraintlayout:constraintlayout:"
            + "${androidx_constraintlayout_version}")
    implementation("androidx.coordinatorlayout:coordinatorlayout:"
            + "${androidx_coordinatorlayout_version}")
    implementation("androidx.core:core:${androidx_core_version}")
    implementation("androidx.customview:customview:${androidx_customview_version}")
    implementation("androidx.documentfile:documentfile:${androidx_documentfile_version}")
    implementation("androidx.drawerlayout:drawerlayout:${androidx_drawerlayout_version}")
    implementation("androidx.exifinterface:exifinterface:${androidx_exifinterface_version}")
    implementation("androidx.fragment:fragment:${androidx_fragment_version}")

    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:${androidx_lifecycle_version}")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:${androidx_lifecycle_version}")

    implementation("androidx.preference:preference:${androidx_preference_version}")
    implementation("androidx.recyclerview:recyclerview:${androidx_recyclerview_version}")
//    implementation("androidx.slidingpanelayout:slidingpanelayout:"
//            + "${androidx_slidingpanelayout_version}")
    implementation("androidx.viewpager2:viewpager2:${androidx_viewpager2_version}")
    implementation("androidx.window:window:${androidx_window_version}")

    // https://github.com/material-components/material-components-android/releases
    implementation("com.google.android.material:material:${google_material_version}")

    // jsoup HTML parser library @ https://jsoup.org/
    implementation("org.jsoup:jsoup:${jsoup_version}")

    // New CameraX based scanner code from "TinyZXingWrapper"
    releaseImplementation("com.hardbacknutter.tinyzxingwrapper:TinyZXingWrapper:" +
            "${tiny_zxing_wrapper_version}:release@aar")
    betaImplementation("com.hardbacknutter.tinyzxingwrapper:TinyZXingWrapper:" +
            "${tiny_zxing_wrapper_version}:release@aar")
    debugImplementation("com.hardbacknutter.tinyzxingwrapper:TinyZXingWrapper:" +
            "${tiny_zxing_wrapper_version}:debug@aar")

    implementation "com.google.zxing:core:${zxing_core_version}"

    implementation("androidx.camera:camera-core:${androidx_camerax_version}")
    implementation("androidx.camera:camera-camera2:${androidx_camerax_version}")
    implementation("androidx.camera:camera-lifecycle:${androidx_camerax_version}")
    implementation("androidx.camera:camera-view:${androidx_camerax_version}")

    // https://www.acra.ch/docs/Setup/
    implementation("ch.acra:acra-core:${acra_version}")
    implementation("ch.acra:acra-mail:${acra_version}")
    implementation("ch.acra:acra-dialog:${acra_version}")
    //implementation("com.google.auto.service:auto-service-annotations:${google_auto_service_version}")
    //annotationProcessor("com.google.auto.service:auto-service:${google_auto_service_version}")

    // local tests use JUnit5
    testImplementation("org.mockito:mockito-core:${mockito_version}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockito_version}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${jupiter_version}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${jupiter_version}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${jupiter_version}")

    androidTestImplementation("de.mannodermaus.junit5:android-test-core:${mannodermaus_version}")
    androidTestRuntimeOnly("de.mannodermaus.junit5:android-test-runner:${mannodermaus_version}")

    // device tests use JUnit4
    androidTestImplementation("androidx.test:core:${androidx_test_core_version}")
    androidTestImplementation("androidx.test:runner:${androidx_test_runner_version}")
    androidTestImplementation("androidx.test:rules:${androidx_test_rules_version}")

    androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:" +
            "${kotlinx_coroutines_core}")

//    testImplementation("org.robolectric:robolectric:4.4")
//    androidTestImplementation("androidx.test.espresso:espresso-core:3.3.0")
}
